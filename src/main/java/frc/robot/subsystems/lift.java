// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.
// Initializes an encoder on DIO pins 0 and 1
// Defaults to 4X decoding and non-inverted

package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class lift extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DoubleSolenoid armExtender;
private DigitalInput bodySwitch;
private DigitalInput outerSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax lifter;

    /**
    *
    */
    public lift() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
armExtender = new DoubleSolenoid(0, PneumaticsModuleType.CTREPCM, 0, 0);
 addChild("armExtender", armExtender);
 

bodySwitch = new DigitalInput(0);
 addChild("bodySwitch", bodySwitch);
 

outerSwitch = new DigitalInput(1);
 addChild("outerSwitch", outerSwitch);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    lifter = new CANSparkMax(20, MotorType.kBrushless);
    armExtender.set(Value.kForward);


    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void liftWithJoystick(Joystick joystick2) {
        double speed = joystick2.getX();
        //negitive values are isOuterTriggered, and postive values are isBodyTriggered.
        if (isBodyTriggered() && speed > 0){
            speed = 0;
        } else if (isOuterTriggered() && speed < 0) {
            speed = 0;
        } else
             lifter.set(speed);
             SmartDashboard.putNumber("speed", speed);
    }

    public void toggleArm () {
        armExtender.toggle();
    }
    public void liftToPoint () {

    }
    public boolean isBodyTriggered() {
        if (bodySwitch.get()) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isOuterTriggered() {
        if (outerSwitch.get()) {
            return true;
        } else {
            return false;
        }
    }
}
